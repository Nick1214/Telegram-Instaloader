from Bot.config import token
from aiogram import Bot, Dispatcher, executor, types
import logging
import instaloader
import asyncio
import os

bot = Bot(token=token)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
array_with_buttons_1 = ["–°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ"]
keyboard.add(*array_with_buttons_1)

#
# @dp.message_handler(commands=["info"])
# async def get_bot_info(message: types.Message):
#     await message.answer("!!! –í–ù–ò–ú–ê–ù–ò–ï –ö–†–ò–°–¢–ò–ù–û–ß–ö–ê!!!")
#     await message.answer("–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–∞—Ä—Å–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è")
#     await message.answer(
#         "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫ —á—Ç–æ–±—ã —Ç—ã –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤—Ö–æ–¥–∏–ª–∞ –∏ —Å–º–æ—Ç—Ä–µ–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞")
#     await message.answer("–í —Ç–æ–º —á–∏—Å–ª–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ")
#     await message.answer("–ê —Ç–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ")
#     await message.answer("–î–∞ –∏ –≤–æ–æ–±—â–µ, —è —ç—Ç–∏–º –±–æ—Ç–æ–º –ø–æ–∏–≥—Ä–∞—Ç—å—Å—è –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–µ–ª, –¥–∞  –∏ —è –ª–µ–Ω–∏–≤—ã–π")
#     await message.answer("–¢–∞–∫ —á—Ç–æ –ø–æ–ª—å–∑—É–π—Å—è –ø–æ–∫–∞ —Ç–µ–º —á—Ç–æ –µ—Å—Ç—å")
#     await message.answer("üòò")
#     await message.answer("–ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == str(array_with_buttons_1[1]))
async def get_profile_name(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    await message.answer("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ! –ü–µ—Ä–≤—ã–º —Å–ª–æ–≤–æ–º —É–∫–∞–∑—ã–≤–∞–µ–º #, –∞ –¥–∞–ª—å—à–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è")
    await message.answer("–ù–∞–ø—Ä–∏–º–µ—Ä: #bla-bla-bla")

    @dp.message_handler(lambda message: message.text[0] == "#")
    async def get_profile_info(message: types.Message):
        profile_name = message.text[1:]
        await message.answer("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        try:
            insta = instaloader.Instaloader()
            profile = instaloader.Profile.from_username(insta.context, profile_name)

            Fullname = profile.full_name
            Get_followers = profile.followers
            GetFollowings = profile.followees
            Biography = profile.biography
            AccountClosed = profile.is_private
            await message.answer(f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {Fullname}")
            await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–æ–∫–≤: {Get_followers}")
            await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫: {GetFollowings}")
            if Biography is None:
                await message.answer("–î–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—Ç—É—Å—Ç–≤—É–µ—Ç")
            else:
                await message.answer(f"–î–æ–ø –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {Biography}")
            if AccountClosed is False:
                await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–∫—Ä—ã—Ç")
            else:
                await message.answer("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–∫—Ä—ã—Ç...")
            posts = profile.get_posts()
            count = 0
            dct = {}

            for post in posts:
                count += 1
                post_username = post.profile
                post_date = post.date
                post_likes = post.likes
                post_url = post.url
                post_comments = post.comments
                # print(f"Username: {post_username}, Date: {post_date}, Likes: {post_likes}, URL: {post_url}")
                dct = {
                    "post_date": post_date,
                    "post_likes": post_likes,
                    "post_url": post_url,
                    "The number of post": count,
                }
                for key, value in dct.items():
                    await message.answer(f"{key} -> {value}")
        except Exception:
            await message.answer(
                "–ü—Ä–æ—Ñ–∏–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            await message.answer("–ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–∫—Ä—ã—Ç, –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç")

    @dp.message_handler(lambda message: message.text[0] != "#")
    async def print_out_error(message: types.Message):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è! –ü–æ—Å—Ç–∞–≤—å—Ç–µ # –≤ –Ω–∞—á–∞–ª–æ!")


@dp.message_handler(lambda message: message.text == str(array_with_buttons_1[0]))
async def get_profile_name(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    await message.answer("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ! –ü–µ—Ä–≤—ã–º —Å–ª–æ–≤–æ–º —É–∫–∞–∑—ã–≤–∞–µ–º #, –∞ –¥–∞–ª—å—à–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è")
    await message.answer("–ù–∞–ø—Ä–∏–º–µ—Ä: #bla-bla-bla")

    @dp.message_handler(lambda message: message.text[0] == "#")
    async def download_profile(message: types.Message):
        try:
            await message.answer("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é....")
            insta = instaloader.Instaloader()
            profile_name = message.text[1:]
            insta.download_profile(profile_name)
            await message.answer("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é....")
            await message.answer(
                "–°–∫–∞—á–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."
            )
            await message.answer(
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ —Ç–æ –≤—Ä–µ–º—è....")
            await message.answer("–°–∫–∞—á–∞–Ω–æ!")

        except Exception:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            await message.answer("–ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–∫—Ä—ã—Ç, –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç")

    @dp.message_handler(lambda message: message.text != "#")
    async def print_out_error(message: types.Message):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è! –ü–æ—Å—Ç–∞–≤—å—Ç–µ # –≤ –Ω–∞—á–∞–ª–æ!")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)